// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectsMeasurements.DBContext;

#nullable disable

namespace ProjectsMeasurements.DBContext.Migrations
{
    [DbContext(typeof(ProjectsMeasurementsDBContext))]
    partial class ProjectsMeasurementsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.MeasurementsType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<string>("TypeNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("MeasurementsTypes");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.PlantsCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CategoryNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("FullCode")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar")
                        .HasColumnName("FullCode");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("ParentID");

                    b.ToTable("PlantsCategories");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<string>("UnitNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Contractor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ContractorNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContractorNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.MeasurementsDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementHeaderID")
                        .HasColumnType("int");

                    b.Property<int>("PlantDetailID")
                        .HasColumnType("int");

                    b.Property<int>("PlantQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("PlantTotalPrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("PlantTotalPrice");

                    b.Property<decimal>("PlantUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("MeasurementHeaderID");

                    b.HasIndex("PlantDetailID");

                    b.ToTable("MeasurementsDetails");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.MeasurementsHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ContractorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("MeasurementDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("MeasurementTotalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("MeasurementTypeID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("ID");

                    b.HasIndex("ContractorID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("MeasurementTypeID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ProjectID");

                    b.ToTable("MeasurementsHeaders");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Owner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Plant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int>("PlantCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("PlantCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlantDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PlantFullCode")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar")
                        .HasColumnName("PlantFullCode");

                    b.Property<string>("PlantNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlantNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlantNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("PlantCategoryID");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.PlantsDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("PlantDefaultPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("PlantHeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("PlantHeihgtUnitID")
                        .HasColumnType("int");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<decimal>("PlantTrunkWidth")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("PlantHeihgtUnitID");

                    b.HasIndex("PlantID");

                    b.ToTable("PlantsDetails");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("FullCode")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar")
                        .HasColumnName("FullCode");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ProjectNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("ParentID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("GroupDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("GroupNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.GroupsPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("PermissionID");

                    b.ToTable("GroupsPermissions");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("FullCode")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar")
                        .HasColumnName("FullCode");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("PermissionNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermissionNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("ParentID");

                    b.HasIndex("PermissionTypeID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.PermissionsType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTypeNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermissionTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.ToTable("PermissionsTypes");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("UserEmail");

                    b.HasIndex("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.UsersGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("LastUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UsersGroups");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.MeasurementsType", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.PlantsCategory", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.BasicData.PlantsCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.BasicData.Unit", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Contractor", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.MeasurementsDetail", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.Operations.MeasurementsHeader", "MeasurementHeader")
                        .WithMany()
                        .HasForeignKey("MeasurementHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Operations.PlantsDetail", "MeasurmentPlantDetail")
                        .WithMany()
                        .HasForeignKey("PlantDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("MeasurementHeader");

                    b.Navigation("MeasurmentPlantDetail");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.MeasurementsHeader", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Operations.Contractor", "MeasurementContractor")
                        .WithMany()
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.BasicData.MeasurementsType", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Operations.Owner", "MeasurementOwner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Operations.Project", "MeasurementProject")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("MeasurementContractor");

                    b.Navigation("MeasurementOwner");

                    b.Navigation("MeasurementProject");

                    b.Navigation("MeasurementType");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Owner", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Plant", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.BasicData.PlantsCategory", "CategoryOfPlant")
                        .WithMany()
                        .HasForeignKey("PlantCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryOfPlant");

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.PlantsDetail", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.BasicData.Unit", "PlantHeightUnit")
                        .WithMany()
                        .HasForeignKey("PlantHeihgtUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Operations.Plant", "ParentPlant")
                        .WithMany()
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentPlant");

                    b.Navigation("PlantHeightUnit");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Operations.Project", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.Operations.Project", "ParentProject")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentProject");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.Group", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.GroupsPermission", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.Group", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID");

                    b.HasOne("ProjectsMeasurements.Models.Security.Permission", "ParentPermission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentGroup");

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.Permission", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.Security.Permission", "ParentPermission")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.Security.PermissionsType", "TypeOfPermission")
                        .WithMany()
                        .HasForeignKey("PermissionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentPermission");

                    b.Navigation("TypeOfPermission");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.PermissionsType", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.User", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastUpdateUser");
                });

            modelBuilder.Entity("ProjectsMeasurements.Models.Security.UsersGroup", b =>
                {
                    b.HasOne("ProjectsMeasurements.Models.Security.Group", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsMeasurements.Models.Security.User", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectsMeasurements.Models.Security.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ParentGroup");

                    b.Navigation("ParentUser");
                });
#pragma warning restore 612, 618
        }
    }
}
